// Code generated by MockGen. DO NOT EDIT.
// Source: contract.go

// Package service is a generated GoMock package.
package service

import (
	context "context"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	model "github.com/s21platform/materials-service/internal/model"
)

// MockDBRepo is a mock of DBRepo interface.
type MockDBRepo struct {
	ctrl     *gomock.Controller
	recorder *MockDBRepoMockRecorder
}

// MockDBRepoMockRecorder is the mock recorder for MockDBRepo.
type MockDBRepoMockRecorder struct {
	mock *MockDBRepo
}

// NewMockDBRepo creates a new mock instance.
func NewMockDBRepo(ctrl *gomock.Controller) *MockDBRepo {
	mock := &MockDBRepo{ctrl: ctrl}
	mock.recorder = &MockDBRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDBRepo) EXPECT() *MockDBRepoMockRecorder {
	return m.recorder
}

// AddLike mocks base method.
func (m *MockDBRepo) AddLike(ctx context.Context, materialUUID, userUUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddLike", ctx, materialUUID, userUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddLike indicates an expected call of AddLike.
func (mr *MockDBRepoMockRecorder) AddLike(ctx, materialUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddLike", reflect.TypeOf((*MockDBRepo)(nil).AddLike), ctx, materialUUID, userUUID)
}

// CheckLike mocks base method.
func (m *MockDBRepo) CheckLike(ctx context.Context, materialUUID, userUUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckLike", ctx, materialUUID, userUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CheckLike indicates an expected call of CheckLike.
func (mr *MockDBRepoMockRecorder) CheckLike(ctx, materialUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckLike", reflect.TypeOf((*MockDBRepo)(nil).CheckLike), ctx, materialUUID, userUUID)
}

// CreateMaterial mocks base method.
func (m *MockDBRepo) CreateMaterial(ctx context.Context, ownerUUID string, material *model.CreateMaterial) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMaterial", ctx, ownerUUID, material)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateMaterial indicates an expected call of CreateMaterial.
func (mr *MockDBRepoMockRecorder) CreateMaterial(ctx, ownerUUID, material interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMaterial", reflect.TypeOf((*MockDBRepo)(nil).CreateMaterial), ctx, ownerUUID, material)
}

// EditMaterial mocks base method.
func (m *MockDBRepo) EditMaterial(ctx context.Context, material *model.EditMaterial) (*model.Material, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EditMaterial", ctx, material)
	ret0, _ := ret[0].(*model.Material)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EditMaterial indicates an expected call of EditMaterial.
func (mr *MockDBRepoMockRecorder) EditMaterial(ctx, material interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EditMaterial", reflect.TypeOf((*MockDBRepo)(nil).EditMaterial), ctx, material)
}

// GetAllMaterials mocks base method.
func (m *MockDBRepo) GetAllMaterials(ctx context.Context) (*model.MaterialList, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllMaterials", ctx)
	ret0, _ := ret[0].(*model.MaterialList)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllMaterials indicates an expected call of GetAllMaterials.
func (mr *MockDBRepoMockRecorder) GetAllMaterials(ctx interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllMaterials", reflect.TypeOf((*MockDBRepo)(nil).GetAllMaterials), ctx)
}

// GetLikesCount mocks base method.
func (m *MockDBRepo) GetLikesCount(ctx context.Context, materialUUID string) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetLikesCount", ctx, materialUUID)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetLikesCount indicates an expected call of GetLikesCount.
func (mr *MockDBRepoMockRecorder) GetLikesCount(ctx, materialUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetLikesCount", reflect.TypeOf((*MockDBRepo)(nil).GetLikesCount), ctx, materialUUID)
}

// GetMaterial mocks base method.
func (m *MockDBRepo) GetMaterial(ctx context.Context, uuid string) (*model.Material, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterial", ctx, uuid)
	ret0, _ := ret[0].(*model.Material)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterial indicates an expected call of GetMaterial.
func (mr *MockDBRepoMockRecorder) GetMaterial(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterial", reflect.TypeOf((*MockDBRepo)(nil).GetMaterial), ctx, uuid)
}

// GetMaterialOwnerUUID mocks base method.
func (m *MockDBRepo) GetMaterialOwnerUUID(ctx context.Context, uuid string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMaterialOwnerUUID", ctx, uuid)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMaterialOwnerUUID indicates an expected call of GetMaterialOwnerUUID.
func (mr *MockDBRepoMockRecorder) GetMaterialOwnerUUID(ctx, uuid interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMaterialOwnerUUID", reflect.TypeOf((*MockDBRepo)(nil).GetMaterialOwnerUUID), ctx, uuid)
}

// RemoveLike mocks base method.
func (m *MockDBRepo) RemoveLike(ctx context.Context, materialUUID, userUUID string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "RemoveLike", ctx, materialUUID, userUUID)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// RemoveLike indicates an expected call of RemoveLike.
func (mr *MockDBRepoMockRecorder) RemoveLike(ctx, materialUUID, userUUID interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "RemoveLike", reflect.TypeOf((*MockDBRepo)(nil).RemoveLike), ctx, materialUUID, userUUID)
}

// UpdateLikesCount mocks base method.
func (m *MockDBRepo) UpdateLikesCount(ctx context.Context, materialUUID string, likesCount int32) (int32, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateLikesCount", ctx, materialUUID, likesCount)
	ret0, _ := ret[0].(int32)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateLikesCount indicates an expected call of UpdateLikesCount.
func (mr *MockDBRepoMockRecorder) UpdateLikesCount(ctx, materialUUID, likesCount interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateLikesCount", reflect.TypeOf((*MockDBRepo)(nil).UpdateLikesCount), ctx, materialUUID, likesCount)
}

// WithTx mocks base method.
func (m *MockDBRepo) WithTx(ctx context.Context, cb func(context.Context) error) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTx", ctx, cb)
	ret0, _ := ret[0].(error)
	return ret0
}

// WithTx indicates an expected call of WithTx.
func (mr *MockDBRepoMockRecorder) WithTx(ctx, cb interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTx", reflect.TypeOf((*MockDBRepo)(nil).WithTx), ctx, cb)
}
