// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v6.31.1
// source: api/materials.proto

package materials

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	MaterialsService_CreateMaterial_FullMethodName  = "/MaterialsService/CreateMaterial"
	MaterialsService_GetMaterial_FullMethodName     = "/MaterialsService/GetMaterial"
	MaterialsService_GetAllMaterials_FullMethodName = "/MaterialsService/GetAllMaterials"
	MaterialsService_EditMaterial_FullMethodName    = "/MaterialsService/EditMaterial"
	MaterialsService_ToggleLike_FullMethodName      = "/MaterialsService/ToggleLike"
)

// MaterialsServiceClient is the client API for MaterialsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MaterialsServiceClient interface {
	CreateMaterial(ctx context.Context, in *CreateMaterialIn, opts ...grpc.CallOption) (*CreateMaterialOut, error)
	GetMaterial(ctx context.Context, in *GetMaterialIn, opts ...grpc.CallOption) (*GetMaterialOut, error)
	GetAllMaterials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllMaterialsOut, error)
	EditMaterial(ctx context.Context, in *EditMaterialIn, opts ...grpc.CallOption) (*EditMaterialOut, error)
	ToggleLike(ctx context.Context, in *ToggleLikeIn, opts ...grpc.CallOption) (*ToggleLikeOut, error)
}

type materialsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMaterialsServiceClient(cc grpc.ClientConnInterface) MaterialsServiceClient {
	return &materialsServiceClient{cc}
}

func (c *materialsServiceClient) CreateMaterial(ctx context.Context, in *CreateMaterialIn, opts ...grpc.CallOption) (*CreateMaterialOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateMaterialOut)
	err := c.cc.Invoke(ctx, MaterialsService_CreateMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetMaterial(ctx context.Context, in *GetMaterialIn, opts ...grpc.CallOption) (*GetMaterialOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetMaterialOut)
	err := c.cc.Invoke(ctx, MaterialsService_GetMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) GetAllMaterials(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*GetAllMaterialsOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetAllMaterialsOut)
	err := c.cc.Invoke(ctx, MaterialsService_GetAllMaterials_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) EditMaterial(ctx context.Context, in *EditMaterialIn, opts ...grpc.CallOption) (*EditMaterialOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(EditMaterialOut)
	err := c.cc.Invoke(ctx, MaterialsService_EditMaterial_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *materialsServiceClient) ToggleLike(ctx context.Context, in *ToggleLikeIn, opts ...grpc.CallOption) (*ToggleLikeOut, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ToggleLikeOut)
	err := c.cc.Invoke(ctx, MaterialsService_ToggleLike_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MaterialsServiceServer is the server API for MaterialsService service.
// All implementations must embed UnimplementedMaterialsServiceServer
// for forward compatibility.
type MaterialsServiceServer interface {
	CreateMaterial(context.Context, *CreateMaterialIn) (*CreateMaterialOut, error)
	GetMaterial(context.Context, *GetMaterialIn) (*GetMaterialOut, error)
	GetAllMaterials(context.Context, *emptypb.Empty) (*GetAllMaterialsOut, error)
	EditMaterial(context.Context, *EditMaterialIn) (*EditMaterialOut, error)
	ToggleLike(context.Context, *ToggleLikeIn) (*ToggleLikeOut, error)
	mustEmbedUnimplementedMaterialsServiceServer()
}

// UnimplementedMaterialsServiceServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedMaterialsServiceServer struct{}

func (UnimplementedMaterialsServiceServer) CreateMaterial(context.Context, *CreateMaterialIn) (*CreateMaterialOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) GetMaterial(context.Context, *GetMaterialIn) (*GetMaterialOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) GetAllMaterials(context.Context, *emptypb.Empty) (*GetAllMaterialsOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetAllMaterials not implemented")
}
func (UnimplementedMaterialsServiceServer) EditMaterial(context.Context, *EditMaterialIn) (*EditMaterialOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method EditMaterial not implemented")
}
func (UnimplementedMaterialsServiceServer) ToggleLike(context.Context, *ToggleLikeIn) (*ToggleLikeOut, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ToggleLike not implemented")
}
func (UnimplementedMaterialsServiceServer) mustEmbedUnimplementedMaterialsServiceServer() {}
func (UnimplementedMaterialsServiceServer) testEmbeddedByValue()                          {}

// UnsafeMaterialsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MaterialsServiceServer will
// result in compilation errors.
type UnsafeMaterialsServiceServer interface {
	mustEmbedUnimplementedMaterialsServiceServer()
}

func RegisterMaterialsServiceServer(s grpc.ServiceRegistrar, srv MaterialsServiceServer) {
	// If the following call pancis, it indicates UnimplementedMaterialsServiceServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&MaterialsService_ServiceDesc, srv)
}

func _MaterialsService_CreateMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateMaterialIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialsService_CreateMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).CreateMaterial(ctx, req.(*CreateMaterialIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetMaterialIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialsService_GetMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetMaterial(ctx, req.(*GetMaterialIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_GetAllMaterials_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).GetAllMaterials(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialsService_GetAllMaterials_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).GetAllMaterials(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_EditMaterial_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EditMaterialIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).EditMaterial(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialsService_EditMaterial_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).EditMaterial(ctx, req.(*EditMaterialIn))
	}
	return interceptor(ctx, in, info, handler)
}

func _MaterialsService_ToggleLike_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ToggleLikeIn)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MaterialsServiceServer).ToggleLike(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: MaterialsService_ToggleLike_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MaterialsServiceServer).ToggleLike(ctx, req.(*ToggleLikeIn))
	}
	return interceptor(ctx, in, info, handler)
}

// MaterialsService_ServiceDesc is the grpc.ServiceDesc for MaterialsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var MaterialsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "MaterialsService",
	HandlerType: (*MaterialsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreateMaterial",
			Handler:    _MaterialsService_CreateMaterial_Handler,
		},
		{
			MethodName: "GetMaterial",
			Handler:    _MaterialsService_GetMaterial_Handler,
		},
		{
			MethodName: "GetAllMaterials",
			Handler:    _MaterialsService_GetAllMaterials_Handler,
		},
		{
			MethodName: "EditMaterial",
			Handler:    _MaterialsService_EditMaterial_Handler,
		},
		{
			MethodName: "ToggleLike",
			Handler:    _MaterialsService_ToggleLike_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/materials.proto",
}
